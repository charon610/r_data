1+1
2*5
3-2
1+1
2*5
3-2
a <- 2
b <- 2
a+b
a <- 5
a*b
b <- 7
a*b
a=3
b=2
a*b
var1 <- c(1,2,5,7,8)
var1
var2
var2 <- c(1:5)
var2
var3 <- seq(1,5)
var3
var4 <- seq(1,10,by=2)
var4
var1 + 2
install.packages("ggplot2")
library(ggplot2)
x <- c("a", "a", "b", "c")
x
qplot(x)
#data에 mpg, x축에 hwy 변수 지정해서 그래프 출력
qplot(data=mpg, x=hwy)
ggplot2 : mpg
#x축
qplot(data = mpg, x=cty)
#x축
qplot(data = mpg, x=city)
#x축
qplot(data = mpg, x=city)
#x축 drv, y축 hwy, 선 그래프 형태
qplot(data = mpg, x=drv, y=hwy, geom = "line")
#x축 drv, y축 hwy, 상자 그래프 형태
qplot(data = mpg, x=drv, y=hwy, geom = "boxplot")
#x축 city
qplot(data = mpg, x=city)
#x축 city
qplot(data = mpg, x=city)
#x축 city
qplot(data = mpg, x=cty)
#x축 drv, y축 hwy, 상자 그래프 형태, drv별 색 표현
qplot(data = mpg, x=drv, y=hwy, geom = "boxplot", color =drv)
#x축 drv, y축 hwy, 상자 그래프 형태, drv별 색 표현
qplot(data = mpg, x=drv, y=hwy, geom = "boxplot", colour =drv)
#x축 cty
qplot(data = mpg, x=cty)
english <- c(90, 80, 60, 70)
english
math <- c(50, 60, 100, 20)
math
# 데이터 프레임에 할당
df_midterm <- data.frame(english, math)
df_midterm
# 데이터 분석
mean(df_midterm$english) #영어 평균
mean(df_midterm$math) #수학학 평균
mean(df_midterm$math) #수학 평균
install.packages("readxl")
#install.packages("readxl")
library(readxl)
df_exam <- read_excel("../0817/data/excel.xlsx")
df_exam <- read_excel("../0817/data/excel_exam.xlsx")
df_exam <- read_excel("/0817/data/excel_exam.xlsx")
df_exam <- read_excel("0817/data/excel_exam.xlsx")
df_exam
<- read_excel("0817/data/excel_nt_exam.xlsx")
df_exam1 <- read_excel("0817/data/excel_nt_exam.xlsx")
df_exam1
df_exam1 <- read_excel("0817/data/excel_nt_exam.xlsx", col_names = F)
df_exam1
df_csvfile <- read.csv("0817/data/excel_exam.csv")
df_csvfile
df_csvfile
df_midterm <- data.frame(class=c(1,1,2,2),english=c(90,80,70,60),math=c(50,80,40,90))
df_midterm
df_exam <- read_excel("0817/data/excel_exam.xlsx")
df_exam
head(df_exam)
tail(df_exam)
#위에서부터 n개의 데이터 출력
head(df_exam, 3)
View(df_exam)
dim(exam)
dim(df_exam)
#
str(df_exam)
summary(df_exam)
# mpg 데이터 분석
library(ggplot2)
#ggplot2의 mpg 데이터를 데이터프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
dim(mpg)
head(mpg)
tail(mpg)
head(mpg)
str(mpg)
df_raw <- data.frame(var=c(1,2,1), var2=c(2,3,2))
df_raw
#변수명 바꾸기
df_raw <- data.frame(var1=c(1,2,1), var2=c(2,3,2))
df_raw
install.packages("dplyr")
library(dplyr)
#복사본 생성
df_new <- df_raw
#var2를 v2로 수정
df_new <- rename(df_new, v2=var2)
df_new
#파생 변수
df$var_sum <- df$var1 + df$var2
df
df <- df_raw
#파생 변수
df$var_sum <- df$var1 + df$var2
df
head(mpg)
mpg$total <- (mpg$cty + mpg$hwy)/2
mpg$total
mpg
mpg(head)
head(mpg)
#통합연비의 평균
mean(mpg$total)
summary(mpg)
summary(mpg$total)
#total이 20이상이면 pass 그렇지 않으면 fail
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg$test)
View(mpg)
table(mpg$test)
View(mpg)
qplot(mpg$test)
#grade 파생변수로 total이 30이상이면 A, 20이상이면 B, 20미만이면 C
mpg$grade <- ifelse(mpg$total >=30, "A", ifelse(mpg$total >=20, "B", "C"))
head(mpg)
View(mpg)
library(dplyr)
exam <- read.csv("data/sample.csv")
exam <- read.csv("0817/data/sample.csv")
exam <- read.csv("0817/data/sample.csv")
exam <- read.csv("0817/data/sample.csv")
View(df_new)
exam <- read.csv("0817/data/sample.csv")
exam
dim(exam)
#exam에서 class가 1인 경우만 추출해 출력
exam %>% filters(class == 1)
#exam에서 class가 1인 경우만 추출해 출력
exam %>% filter(class == 1)
#exam에서 class가 2인 경우만 추출해 출력
exam %>% filter(class == 2)
#exam에서 class가 1이 아닌 경우를 추출해 출력
exam %>% filter(class != 1)
#math가 50점 초과
exam %>% filter(math > 50)
exam
#math가 50점 초과
exam %>% filter(math > 50)
#영어 점수가 80점 이하
exam %>% filter(english <= 80)
#여러
exam %>% filter(class == 1 && math >= 50)
#여러
exam %>% filter(class == 1 & math >= 50)
# 영어점수가 90점 미만이거나 과학점수가 50점 미만
exam %>% filter(english <90 | science < 50)
# 수학만 추출
exam %>% select(math)
exam %>% select(class, math, english)
exam %>% !select(science)
exam %>% select(!science)
exam %>% select(-science)
exam %>% select(!science)
#class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
#class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(class, english)
exam %>% select(id, math)
head(exam %>% select(id, math))
head(exam %>% select(id, math)3)
head(exam %>% select(id, math),3)
exam %>% select(id, math) %>% head
exam %>% select(id, math) %>% head(3)
#math 오름차순 정렬
exam %>% arrange(math)
#math 내림차순 정렬
exam %>% arrange(desc(math)
#math 내림차순 정렬
exam %>% arrange(desc(math))
#math 내림차순 정렬
exam %>% arrange(desc(math))
#class 및 math 오름차순
exam %>% arrange(class, math)
#총합 변수 추가
exam %>%
mutate(total = math + english + science) %>%
head
#총합/평균 변수 추가
exam %>%
mutate(total = math + english + science,
mean = (math + english + science)/3) %>%
head
#
exam %>%
mutate(ifelse(test >= 60), "pass" ,"fail")
#
exam %>%
mutate(test = ifelse(science >= 60), "pass" ,"fail")
mutate(test = ifelse(science >= 60, "pass" ,"fail")
#
exam %>%
#
exam %>%
mutate(test = ifelse(science >= 60, "pass" ,"fail"))
# 종합점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>% arrange(total)
mutate(total = math + english + science) %>% arrange(desc(total)
# 종합점수를 계산하고 총합점수 순으로 정렬
exam %>%
# 종합점수를 계산하고 총합점수 순으로 정렬
exam %>%
mutate(total = math + english + science) %>% arrange(desc(total))
exam
# class별로 분리 // math 평균 산출
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))
# class별로 분리
# math 평균
# math 합계
# math 중앙값
# 학생 수
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math), sum_math = sum(math))
# class별로 분리
# math 평균
# math 합계
# math 중앙값
# 학생 수
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math), sum_math = sum(math), med_math = median(math), total = sum(id))
# class별로 분리
# math 평균
# math 합계
# math 중앙값
# 학생 수
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math), sum_math = sum(math), med_math = median(math), n = n())
mpg
View(mpg)
mpg %>% group_by(manufacturer) %>% select(class == "suv") %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
mpg %>% group_by(manufacturer) %>% select(class == "suv") %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
mpg %>% group_by(manufacturer) %>% select(class == suv) %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
mpg %>% group_by(manufacturer) %>% select(class = suv) %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
mpg %>% group_by(manufacturer) %>% select(class == suv) %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
mpg %>% group_by(manufacturer) %>% select(class) %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
test_mpg %>% mpg
test_mpg <- mpg
test_mpg
test_mpg %>% group_by(manufacturer) %>% select(class)
test_mpg %>% group_by(manufacturer) %>% select(class)
test_mpg %>% group_by(manufacturer) %>% filter(class == suv) %>% mutate(ty = (hwy + cty)/2) %>% summarise(ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
test_mpg %>% group_by(manufacturer) %>% filter(class == suv) %>% mutate(ty = (hwy + cty)/2) %>% summarise(mean_ty = mean(ty)) %>% arrange(desc(ty)) %>% head(5)
test_mpg %>% group_by(manufacturer) %>% filter(class == "suv") %>% mutate(ty = (hwy + cty)/2) %>% summarise(mean_ty = mean(ty)) %>% arrange(desc(mean_ty)) %>% head(5)
test_mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(ty = (hwy + cty)/2) %>%
summarise(mean_ty = mean(ty)) %>%
arrange(desc(mean_ty)) %>%
head(5)
test1
test1
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60.80,70,90,85))
test1
# 중간고사
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60.80,70,90,85))
# 중간고사
test1 <- data.frame(id=c(1,2,3,4,5),
midterm=c(60.80,70,90,85))
# 중간고사
test1 <- data.frame(id=c(1,2,3,4,5), midterm=c(60.80,70,90,85))
# 기말고사
test2 <- data.frame(id=c(1,2,3,4,5), final=c(70.83,65,95,80))
# 중간고사
test1 <- data.frame(id=c(1,2,3,4,5), midterm=c(60,80,70,90,85))
# 기말고사
test2 <- data.frame(id=c(1,2,3,4,5), final=c(70,83,65,95,80))
test1
test2
total <- left_join(test1, test2, by="id") #id를 기준으로 합침
total
# 반별 담임교사
name <- data.frame(class = c(1,2), teacher = c("kim", "lee"))
name
exam_new <- left_join(exam, name, by="class")
exam_new
# 세로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85))
group_a <- data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id=c(6,7,8,9,10),
test=c(70,83,65,95,80))
group_all <- bind_rows(group_a, group_b)
group_all
